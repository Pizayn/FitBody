// <auto-generated />
using System;
using FitBody.Entities.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FitBody.WebUI.Migrations
{
    [DbContext(typeof(FitBodyContext))]
    [Migration("20190530162149_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FitBody.Entities.Concrete.CustomIdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("CustomIdentityRoles");
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.CustomIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("CustomIdentityUsers");
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.Exercise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExerciseName");

                    b.Property<int>("ExerciseTypeID");

                    b.Property<string>("Image");

                    b.HasKey("ID");

                    b.HasIndex("ExerciseTypeID");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.ExerciseType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExerciseTypeName");

                    b.HasKey("ID");

                    b.ToTable("ExerciseTypes");
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Total");

                    b.HasKey("ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.OrderLine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderID");

                    b.Property<int>("Price");

                    b.Property<int>("Quantity");

                    b.Property<int>("SupplementID");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("SupplementID");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.Supplement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<int>("SupplementCategoryID");

                    b.Property<string>("SupplementName");

                    b.Property<int?>("SupplementSubCategoryID");

                    b.HasKey("ID");

                    b.HasIndex("SupplementCategoryID");

                    b.HasIndex("SupplementSubCategoryID");

                    b.ToTable("Supplements");
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.SupplementCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.HasKey("ID");

                    b.ToTable("SupplementCategories");
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.SupplementSubCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SuplementSubCategoryName");

                    b.Property<int>("SupplementCategoryID");

                    b.HasKey("ID");

                    b.HasIndex("SupplementCategoryID");

                    b.ToTable("SupplementSubCategories");
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.Exercise", b =>
                {
                    b.HasOne("FitBody.Entities.Concrete.ExerciseType", "ExerciseType")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.OrderLine", b =>
                {
                    b.HasOne("FitBody.Entities.Concrete.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitBody.Entities.Concrete.Supplement", "Supplement")
                        .WithMany("OrderLines")
                        .HasForeignKey("SupplementID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.Supplement", b =>
                {
                    b.HasOne("FitBody.Entities.Concrete.SupplementCategory", "SupplementCategory")
                        .WithMany("Supplements")
                        .HasForeignKey("SupplementCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FitBody.Entities.Concrete.SupplementSubCategory")
                        .WithMany("Supplements")
                        .HasForeignKey("SupplementSubCategoryID");
                });

            modelBuilder.Entity("FitBody.Entities.Concrete.SupplementSubCategory", b =>
                {
                    b.HasOne("FitBody.Entities.Concrete.SupplementCategory", "SupplementCategory")
                        .WithMany("SupplementSubCategories")
                        .HasForeignKey("SupplementCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
